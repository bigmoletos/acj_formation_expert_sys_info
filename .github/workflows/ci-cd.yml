name: CI/CD Pipeline

on:
  push:
    branches: [ main, master,dev, dev2 ,fix/bug-github-action]
  pull_request:
    branches: [ main, master,dev, dev2 ,fix/bug-github-action]

env:
  DOCKER_IMAGE: temperature-app
  DOCKER_REGISTRY: ghdev, cr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ github.token }}
  FLASK_ENV: testing
  DATABASE_URL: "sqlite:///:memory:"
  SECRET_KEY: test_secret_key
  API_KEY_OPENWEATHER: test_api_key
  LOG_TO_FILE: "False"
  LOG_LEVEL: DEBUG

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: python_machine_learning/projets/projet_temperature

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.12'

  #     - name: Copy testing environment
  #       run: |
  #         cp .env.testing .env
  #         cat .env

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest pytest-cov

  #     - name: Run tests
  #       env:
  #         FLASK_APP: app
  #         FLASK_ENV: testing
  #         DATABASE_URL: "sqlite:///:memory:"
  #         SECRET_KEY: test_secret_key
  #         API_KEY_OPENWEATHER: test_api_key
  #         LOG_TO_FILE: "False"
  #         LOG_LEVEL: DEBUG
  #       run: |
  #         pytest tests/ -v --cov=app --cov-report=xml

  build-and-push:
    # needs: test  # Commenté car les tests sont désactivés
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python_machine_learning/projets/projet_temperature

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy testing environment
        run: |
          cp .env.testing .env
          cat .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: python_machine_learning/projets/projet_temperature
          file: python_machine_learning/projets/projet_temperature/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          build-args: |
            FLASK_APP=${{ env.FLASK_APP }}
            FLASK_ENV=${{ env.FLASK_ENV }}
            SECRET_KEY=${{ env.SECRET_KEY }}
            DATABASE_URL=${{ env.DATABASE_URL }}
            API_KEY_OPENWEATHER=${{ env.API_KEY_OPENWEATHER }}
            LOG_TO_FILE=${{ env.LOG_TO_FILE }}
            LOG_LEVEL=${{ env.LOG_LEVEL }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python_machine_learning/projets/projet_temperature

    steps:
      - name: Copy testing environment
        run: |
          cp .env.testing .env
          cat .env

      - name: Deploy to production
        env:
          FLASK_APP: ${{ env.FLASK_APP }}
          FLASK_ENV: ${{ env.FLASK_ENV }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          API_KEY_OPENWEATHER: ${{ env.API_KEY_OPENWEATHER }}
          LOG_TO_FILE: ${{ env.LOG_TO_FILE }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
        run: |
          echo "Déploiement effectué avec succès"

      - name: Check deployment
        run: |
          echo "Vérification de la structure du projet..."
          ls -la
