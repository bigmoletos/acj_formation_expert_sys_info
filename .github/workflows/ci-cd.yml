name: CI/CD Pipeline

on:
  push:
    branches:
      # - dev
      - dev2
      - master
  pull_request:
    branches:
      # - dev
      - dev2
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: temperature_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: root_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=30s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Load .env file
        run: |
          if [ -f .env ]; then
            export $(grep -v '^#' .env | xargs)
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # Ajoutez ici vos tests unitaires
          echo "Aucun test à exécuter pour le moment."

      - name: Build Docker image
        run: |
          docker build -t projet_temperature .

      - name: Run Docker container
        run: |
          docker run -d -p 5000:5000 projet_temperature

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load .env file
        run: |
          if [ -f .env ]; then
            export $(grep -v '^#' .env | xargs)
          fi

      - name: Deploy to production
        env:
          API_KEY_OPENWEATHER: ${{ env.API_KEY_OPENWEATHER }}
          SECRET_KEY: ${{ env.SECRET_KEY }}
          FLASK_ENV: ${{ env.FLASK_ENV }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          DB_NAME: ${{ env.DB_NAME }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          LOG_FILE_PATH: ${{ env.LOG_FILE_PATH }}
        run: |
          echo "Déploiement effectué avec succès"

      - name: Check deployment
        run: |
          echo "Vérification de la structure du projet..."
          ls -la
          echo "Vérification du contenu du dossier projet_temperature..."
          ls -la python_machine_learning/projets/projet_temperature/
